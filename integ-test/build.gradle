import org.elasticsearch.gradle.test.RestIntegTestTask
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

apply plugin: 'elasticsearch.build'
apply plugin: 'elasticsearch.rest-test'
apply plugin: 'java'
apply plugin: 'io.freefair.lombok'

ext {
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.TXT')
    noticeFile = rootProject.file('NOTICE')
}

tasks.withType(licenseHeaders.class) {
    additionalLicense 'AL   ', 'Apache', 'Licensed under the Apache License, Version 2.0 (the "License")'
}

validateNebulaPom.enabled = false
loggerUsageCheck.enabled = false

repositories {
    mavenCentral()
}

configurations.all {
    exclude group: "commons-logging", module: "commons-logging"
    // enforce 1.1.3, https://www.whitesourcesoftware.com/vulnerability-database/WS-2019-0379
    resolutionStrategy.force 'commons-codec:commons-codec:1.13'
    resolutionStrategy.force 'com.google.guava:guava:29.0-jre'
}

dependencies {
    testCompile group: 'org.elasticsearch.test', name: 'framework', version: "${es_version}"
    testCompile group: 'org.elasticsearch.client', name: 'elasticsearch-rest-high-level-client', version: "${es_version}"
    testCompile group: 'org.elasticsearch.client', name: 'elasticsearch-rest-client', version: "${es_version}"
    testCompile group: 'org.hamcrest', name: 'hamcrest', version: '2.1'
    testCompile group: 'org.apache.logging.log4j', name: 'log4j-core', version:'2.11.1'
    testCompile project(':plugin')
    testCompile project(':legacy')
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.6.2')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.6.2')

    // JDBC drivers for comparison test. Somehow Apache Derby throws security permission exception.
    testCompile fileTree('../sql-jdbc/build/libs') {
        include '*.jar'
        builtBy 'compileJdbc'
    }
    testCompile group: 'com.h2database', name: 'h2', version: '1.4.200'
    testCompile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.28.0'
    testCompile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
}

dependencyLicenses.enabled = false
testingConventions.enabled = false
checkstyleTest.ignoreFailures = true
forbiddenApisTest.enabled = false

compileTestJava {
    options.compilerArgs.addAll(["-processor", 'lombok.launch.AnnotationProcessorHider$AnnotationProcessor'])
    doFirst { // Necessary because of many warnings in legacy SQL IT
        options.compilerArgs.remove('-Werror')
        options.compilerArgs.remove('-Xdoclint:all')
    }
}

testClusters.all {
    testDistribution = 'oss'
    plugin ":plugin"
}

// Run only legacy SQL ITs with new SQL engine disabled
integTest {
    dependsOn (':plugin:bundlePlugin',':integ-test:integTestWithNewEngine')

    systemProperty 'tests.security.manager', 'false'
    systemProperty('project.root', project.projectDir.absolutePath)

    systemProperty "https", System.getProperty("https")
    systemProperty "user", System.getProperty("user")
    systemProperty "password", System.getProperty("password")

    // Set default query size limit
    systemProperty 'defaultQuerySizeLimit', '10000'

    // Tell the test JVM if the cluster JVM is running under a debugger so that tests can use longer timeouts for
    // requests. The 'doFirst' delays reading the debug setting on the cluster till execution time.
    doFirst { systemProperty 'cluster.debug', getDebug()}

    if (System.getProperty("test.debug") != null) {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
    }

    exclude 'com/amazon/opendistroforelasticsearch/sql/ppl/**/*IT.class'
    exclude 'com/amazon/opendistroforelasticsearch/sql/sql/**/*IT.class'
    exclude 'com/amazon/opendistroforelasticsearch/sql/doctest/**/*IT.class'
    exclude 'com/amazon/opendistroforelasticsearch/sql/correctness/**'
}

// Run PPL ITs and new, legacy and comparison SQL ITs with new SQL engine enabled
task integTestWithNewEngine(type: RestIntegTestTask) {
    dependsOn ':plugin:bundlePlugin'

    systemProperty 'tests.security.manager', 'false'
    systemProperty('project.root', project.projectDir.absolutePath)

    systemProperty "https", System.getProperty("https")
    systemProperty "user", System.getProperty("user")
    systemProperty "password", System.getProperty("password")

    // Enable new SQL engine
    systemProperty 'enableNewEngine', 'true'

    // Set default query size limit
    systemProperty 'defaultQuerySizeLimit', '10000'

    // Tell the test JVM if the cluster JVM is running under a debugger so that tests can use longer timeouts for
    // requests. The 'doFirst' delays reading the debug setting on the cluster till execution time.
    doFirst { systemProperty 'cluster.debug', getDebug() }

    if (System.getProperty("test.debug") != null) {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
    }

    exclude 'com/amazon/opendistroforelasticsearch/sql/doctest/**/*IT.class'
    exclude 'com/amazon/opendistroforelasticsearch/sql/correctness/**'

    // Explain IT is dependent on internal implementation of old engine so it's not necessary
    // to run these with new engine and not necessary to make this consistent with old engine.
    exclude 'com/amazon/opendistroforelasticsearch/sql/legacy/ExplainIT.class'
    exclude 'com/amazon/opendistroforelasticsearch/sql/legacy/PrettyFormatterIT.class'
    exclude 'com/amazon/opendistroforelasticsearch/sql/legacy/TermQueryExplainIT.class'

    // Skip old semantic analyzer IT because analyzer in new engine has different behavior
    exclude 'com/amazon/opendistroforelasticsearch/sql/legacy/QueryAnalysisIT.class'

    // Skip this IT because all assertions are against explain output
    exclude 'com/amazon/opendistroforelasticsearch/sql/legacy/OrderIT.class'
}




task docTest(type: RestIntegTestTask) {
    dependsOn ':plugin:bundlePlugin'

    systemProperty 'tests.security.manager', 'false'
    systemProperty('project.root', project.projectDir.absolutePath)

    // Tell the test JVM if the cluster JVM is running under a debugger so that tests can use longer timeouts for
    // requests. The 'doFirst' delays reading the debug setting on the cluster till execution time.
    doFirst { systemProperty 'cluster.debug', getDebug()}

    if (System.getProperty("test.debug") != null) {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
    }

    include 'com/amazon/opendistroforelasticsearch/sql/doctest/**/*IT.class'
    exclude 'com/amazon/opendistroforelasticsearch/sql/correctness/**/*IT.class'
    exclude 'com/amazon/opendistroforelasticsearch/sql/ppl/**/*IT.class'
    exclude 'com/amazon/opendistroforelasticsearch/sql/sql/**/*IT.class'
    exclude 'com/amazon/opendistroforelasticsearch/sql/legacy/**/*IT.class'
}

task comparisonTest(type: RestIntegTestTask) {
    dependsOn ':plugin:bundlePlugin'

    systemProperty 'tests.security.manager', 'false'
    systemProperty('project.root', project.projectDir.absolutePath)

    // Tell the test JVM if the cluster JVM is running under a debugger so that tests can use longer timeouts for
    // requests. The 'doFirst' delays reading the debug setting on the cluster till execution time.
    doFirst { systemProperty 'cluster.debug', getDebug()}

    if (System.getProperty("test.debug") != null) {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
    }

    include 'com/amazon/opendistroforelasticsearch/sql/correctness/**/*IT.class'
    exclude 'com/amazon/opendistroforelasticsearch/sql/doctest/**/*IT.class'
    exclude 'com/amazon/opendistroforelasticsearch/sql/ppl/**/*IT.class'
    exclude 'com/amazon/opendistroforelasticsearch/sql/legacy/**/*IT.class'

    // Enable logging output to console
    testLogging.showStandardStreams true

    // Pass down system properties to IT class
    systemProperty "esHost", System.getProperty("esHost")
    systemProperty "dbUrl", System.getProperty("dbUrl")
    systemProperty "otherDbUrls", System.getProperty("otherDbUrls")
    systemProperty "queries", System.getProperty("queries")
}

task compileJdbc(type:Exec) {
    workingDir '../sql-jdbc/'

    if (DefaultNativePlatform.getCurrentOperatingSystem().isWindows()) {
        commandLine './gradlew.bat', 'build'
        commandLine './gradlew.bat', 'shadowJar'
    } else {
        commandLine './gradlew', 'build'
        commandLine './gradlew', 'shadowJar'
    }
}
