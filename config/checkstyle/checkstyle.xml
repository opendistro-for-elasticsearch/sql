<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">

<module name="Checker">
  <property name="charset" value="UTF-8" />

  <module name="SuppressionFilter">
    <property name="file" value="${config_loc}/../../config/checkstyle/suppressions.xml" />
  </module>

  <!-- Checks Java files and forbids empty Javadoc comments -->
  <module name="RegexpMultiline">
    <property name="id" value="EmptyJavadoc"/>
    <property name="format" value="\/\*[\s\*]*\*\/"/>
    <property name="fileExtensions" value="java"/>
    <property name="message" value="Empty javadoc comments are forbidden"/>
  </module>

  <!-- 
    We include snippets that are wrapped in `// tag` and `// end` into the
    docs, stripping the leading spaces. If the context is wider than 76
    characters then it'll need to scroll. This fails the build if it sees
    such snippets.
  -->
  <module name="RegexpMultiline">
    <property name="id" value="SnippetLength"/>
    <property name="format" value="^( *)\/\/\s*tag(.+)\s*\n(.*\n)*\1.{77,}\n(.*\n)*\1\/\/\s*end\2\s*$"/>
    <property name="fileExtensions" value="java"/>
    <property name="message" value="Code snippets longer than 76 characters get cut off when rendered in the docs"/>
  </module>

  <!-- Checks that no tab characters are used in source files -->
  <module name="FileTabCharacter">
    <property name="eachLine" value="true"/>
  </module>

  <module name="TreeWalker">
    <module name="LineLength">
      <property name="max" value="120"/>
      <property name="ignorePattern" value="^ *\* *https?://[^ ]+$|^ ?\* +\+\-+|^ ?\* +\||^ ?\* ?\-+"/>
    </module>

    <module name="EmptyLineSeparator">
      <property name="allowNoEmptyLineBetweenFields" value="true"/>
    </module>

    <module name="AvoidStarImport" />

    <!-- Unused imports are forbidden -->
    <module name="UnusedImports" />

    <!-- Non-inner classes must be in files that match their names. -->
    <module name="OuterTypeFilename" />
    <!-- No line wraps inside of import and package statements. -->
    <module name="NoLineWrap" />
    <!-- only one statement per line should be allowed -->
    <module name="OneStatementPerLine"/>
    <!-- Each java file has only one outer class -->
    <module name="OneTopLevelClass" />
    <!-- The suffix L is preferred, because the letter l (ell) is often
    hard to distinguish from the digit 1 (one). -->
    <module name="UpperEll"/>

    <module name="EqualsHashCode" />

    <module name="MethodParamPad"/>

    <module name="ParenPad"/>

    <module name="SingleSpaceSeparator">
      <property name="validateComments" value="false"/>
    </module>

    <module name="WhitespaceAfter"/>
    <module name="NoWhitespaceBefore">
      <property name="tokens"
                value="COMMA, DOT, SEMI, ELLIPSIS, POST_INC, POST_DEC, METHOD_REF"/>
      <property name="allowLineBreaks" value="true"/>
    </module>

    <module name="OperatorWrap">
      <property name="option" value="NL"/>
      <property name="tokens"
                value="BAND, BOR, BSR, BXOR, LOR, LAND, DIV, EQUAL, GE, GT, LT, LE,
                    MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF, LITERAL_INSTANCEOF "/>
    </module>

    <module name="LeftCurly"/>
    <module name="RightCurly"/>
    <module name="NeedBraces"/>
    <!-- Checks that the order of modifiers conforms to the suggestions in the
    Java Language specification, sections 8.1.1, 8.3.1 and 8.4.3. It is not that
    the standard is perfect, but having a consistent order makes the code more
    readable and no other order is compellingly better than the standard.
    The correct order is:
            public
            protected
            private
            abstract
            static
            final
            transient
            volatile
            synchronized
            native
            strictfp
    -->
    <module name="ModifierOrder" />

    <!-- Checks that we don't include modifier where they are implied. For
      example, this does not allow interface methods to be declared public
      because they are *always* public. -->
    <module name="RedundantModifier" />
    <!-- Checks that all java files have a package declaration and that it
      lines up with the directory structure. -->
    <module name="PackageDeclaration" />
  </module>
</module>
